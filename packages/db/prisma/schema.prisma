// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"] // TODO: Remove when possible ?
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum ReportReason {
  SPAM
  INAPPROPRIATE
  SCAM
  OTHER
}

enum RelationType {
  TENANT
  POST
  MATCH
}

enum ReportStatus {
  PENDING
  RESOLVED
  REJECTED
}

enum Role {
  TENANT
  OWNER
  AGENCY
  MODERATOR
  ADMIN
}

enum PostType {
  HIDE
  RENTED
  TO_BE_RENTED
}

enum MaritalStatus {
  SINGLE
  MARRIED
  ONE_CHILD
  TWO_CHILD
  OTHER
}

enum EnergyClass {
  A
  B
  C
  D
}

enum HomeType {
  APARTMENT
  HOUSE
}

model User {
  id   String @id @default(cuid())
  role Role?

  email              String?        @unique
  emailVerified      DateTime?
  image              String?        @db.Text
  firstName          String?
  lastName           String?
  phoneNumber        String?        @unique
  country            String?
  description        String?        @db.Text
  birthDate          DateTime?
  job                String?
  employmentContract String?
  income             Int?
  creditScore        Int?
  maritalStatus      MaritalStatus?
  status             UserStatus?    @default(INACTIVE)
  isPremium          Boolean?       @default(false)

  lastLogin DateTime @default(now())

  attribute Attribute?

  posts Post[] @relation("posts_created")

  postsSeen     Post[] @relation("posts_seen")
  postsToBeSeen Post[] @relation("posts_to_be_seen")

  documents     Document[]
  relationships Relationship[]
  messages      Message[]

  bans        Ban[] @relation("banned")
  bansCreated Ban[] @relation("bans_created")

  LeaseCreated Lease[]

  reports        Report[] @relation("reported")
  reportsCreated Report[] @relation("reports_created")

  supportedBy SupportRelationship[] @relation("supportedBy")
  supporting  SupportRelationship[] @relation("supporting")

  stripe    Stripe?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")

}

model Post {
  id String @id @default(cuid())

  createdBy   User   @relation(fields: [createdById], references: [id], "posts_created", onDelete: Cascade)
  createdById String

  certified Boolean @default(false)

  title            String?
  content          String?
  desc             String?      @db.Text
  type             PostType?    @default(TO_BE_RENTED)
  energyClass      EnergyClass?
  ges              EnergyClass?
  constructionDate DateTime?
  estimatedCosts   Int?
  nearestShops     Int?
  securityAlarm    Boolean?
  internetFiber    Boolean?

  attribute Attribute?

  seenBy     User[] @relation("posts_seen")
  toBeSeenBy User[] @relation("posts_to_be_seen")

  images    Image[]
  documents Document[]

  reports       Report[]
  relationships Relationship[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdById])
  @@map("posts")
}

model Attribute {
  id String @id @default(cuid())

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  post   Post?   @relation(fields: [postId], references: [id])
  postId String? @unique

  location String?
  lat      Float?
  lng      Float?

  // Only Tenant
  maxPrice Int?
  minPrice Int?

  maxSize Int?
  minSize Int?

  range Int @default(100)

  // Only Owner and Agency
  price Int?
  size  Int?

  rentStartDate DateTime?
  rentEndDate   DateTime?

  furnished  Boolean?
  homeType   HomeType?
  terrace    Boolean?
  pets       Boolean?
  smoker     Boolean?
  disability Boolean?
  garden     Boolean?
  parking    Boolean?
  elevator   Boolean?
  pool       Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
  @@map("attributes")
}

model Ban {
  id String @id @default(cuid())

  createdBy   User   @relation(fields: [createdById], references: [id], "bans_created", onDelete: Cascade)
  createdById String

  user   User   @relation(fields: [userId], references: [id], "banned", onDelete: Cascade)
  userId String

  reports Report[]

  reason   ReportReason?
  duration String
  until    DateTime
  comment  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdById])
  @@index([userId])
  @@map("bans")
}

model Report {
  id String @id @default(cuid())

  createdBy   User   @relation(fields: [createdById], references: [id], "reports_created", onDelete: Cascade)
  createdById String

  user   User?   @relation(fields: [userId], references: [id], "reported", onDelete: Cascade)
  userId String?

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?

  ban   Ban?    @relation(fields: [banId], references: [id], onDelete: Cascade)
  banId String?

  reason ReportReason?
  desc   String?
  status ReportStatus? @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdById])
  @@index([userId])
  @@index([postId])
  @@index([banId])
  @@map("reports")
}

model Document {
  id String @id @default(cuid())

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  lease   Lease?  @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  leaseId String?

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?

  valid Boolean @default(false)
  ext   String
  name  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([leaseId])
  @@index([postId])
  @@map("documents")
}

model Image {
  id String @id @default(cuid())

  ext String

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@map("pictures")
}

model Relationship {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  conversation Conversation?
  relationType RelationType

  lease Lease?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
  @@map("relationships")
}

model SupportRelationship {
  id String @id @default(cuid())

  support   User   @relation(fields: [supportId], references: [id], "supporting", onDelete: Cascade)
  supportId String

  user   User   @relation(fields: [userId], references: [id], "supportedBy", onDelete: Cascade)
  userId String

  isMatch      Boolean?      @default(false)
  conversation Conversation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([supportId])
  @@index([userId])
  @@map("supportRelationships")
}

model Conversation {
  id String @id @default(cuid())

  relationship Relationship? @relation(fields: [relationId], references: [id], onDelete: Cascade)
  relationId   String?       @unique

  supportRs         SupportRelationship? @relation(fields: [supportRelationId], references: [id], onDelete: Cascade)
  supportRelationId String?              @unique

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([relationId])
  @@map("conversations")
}

model Message {
  id String @id @default(cuid())

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String

  content String
  read    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([conversationId])
  @@index([senderId])
  @@map("messages")
}

model Lease {
  id String @id @default(cuid())

  relationship   Relationship @relation(fields: [relationshipId], references: [id], onDelete: Cascade)
  relationshipId String       @unique

  isSigned      Boolean  @default(false)
  rentCost      Int
  utilitiesCost Int
  startDate     DateTime
  endDate       DateTime

  documents Document[]

  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String

  @@index([relationshipId])
  @@index([createdById])
}

model Stripe {
  id             String @id @default(cuid())
  subscriptionId String

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique
}