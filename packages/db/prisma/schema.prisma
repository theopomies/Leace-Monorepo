// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"] // TODO: Remove when possible ?
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum AccountType {
  ADMIN
  TENANT
  OWNER
  AGENCY
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum ReportReason {
  SPAM
  INAPPROPRIATE
  OTHER
}

enum ReportStatus {
  PENDING
  RESOLVED
  REJECTED
}

enum ConversationType {
  NONE
  TENANT
  OWNER
  AGENCY
  DONE
}

enum Roles {
  USER
  MODERATOR
  ADMIN
}

enum PostType {
  RENTED
  WAITING_FOR_RENT
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id String @id @default(cuid())

  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id String @id @default(cuid())

  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  sessions      Session[]
  accounts      Account[]

  accountType AccountType? @default(TENANT)
  firstName   String?
  lastName    String?
  phoneNumber String?      @unique
  country     String?
  description String?
  birthDate   DateTime?
  status      UserStatus?  @default(ACTIVE)
  isPremium   Boolean?     @default(false)
  role        Roles?       @default(USER)

  images        Image[]
  documents     Document[]
  posts         Post[]
  relationShips RelationShip[]
  messages      Message[]

  reports        Report[] @relation("reported")
  reportsCreated Report[] @relation("reports_created")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Post {
  id String @id @default(cuid())

  user User? @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  createdBy String
  title     String
  content   String
  desc      String
  type      PostType
  price     Float
  duration  DateTime
  size      Float
  furnished Boolean

  images       Image[]
  documents    Document[]
  reports      Report[]
  relationShip RelationShip[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdBy])
  @@map("posts")
}

model Report {
  id String @id @default(cuid())

  userId      String?
  postId      String?
  createdById String

  user      User? @relation(fields: [userId], references: [id], "reported", onDelete: Cascade)
  post      Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdBy User  @relation(fields: [createdById], references: [id], "reports_created", onDelete: Cascade)

  reason ReportReason
  desc   String
  status ReportStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
  @@index([createdById])
  @@map("reports")
}

model Document {
  id String @id @default(cuid())

  userId String?
  postId String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
  @@map("documents")
}

model Image {
  id String @id @default(cuid())

  userId String?
  postId String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
  @@map("pictures")
}

model RelationShip {
  id String @id @default(cuid())

  userId String?
  postId String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

  isMatch      Boolean
  conversation Conversation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
  @@map("relationships")
}

model Conversation {
  id String @id @default(cuid())

  relationId String @unique

  rs RelationShip @relation(fields: [relationId], references: [id], onDelete: Cascade)

  type     ConversationType
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([relationId])
  @@map("conversations")
}

model Message {
  id String @id @default(cuid())

  conversationId String
  senderId       String

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([conversationId])
  @@index([senderId])
  @@map("messages")
}
