// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"] // TODO: Remove when possible ?
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum ReportReason {
  SPAM
  INAPPROPRIATE
  SCAM
  OTHER
}

enum ReportStatus {
  PENDING
  RESOLVED
  REJECTED
}

enum ConversationType {
  NONE
  TENANT
  OWNER
  AGENCY
  DONE
}

enum Roles {
  TENANT
  OWNER
  AGENCY
  MODERATOR
  ADMIN
}

enum PostType {
  RENTED
  TO_BE_RENTED
}

model User {
  id   String @id @default(cuid())
  role Roles

  email         String?   @unique
  emailVerified DateTime?
  image         String?
  firstName   String?
  lastName    String?
  phoneNumber String?     @unique
  country     String?
  description String? @db.Text
  birthDate   DateTime?
  status      UserStatus? @default(INACTIVE)
  isPremium   Boolean?    @default(false)

  attribute Attribute?

  posts         Post[]
  images        Image[] // Not necessary one picture look Ok for users, just post can have more than one pictures. To discuss
  documents     Document[]
  relationships Relationship[]
  messages      Message[]

  reports        Report[] @relation("reported")
  reportsCreated Report[] @relation("reports_created")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Post {
  id String @id @default(cuid())

  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String

  title   String?
  content String?
  desc    String? @db.Text
  type    PostType? @default(TO_BE_RENTED)

  attribute Attribute?

  images    Image[]
  documents Document[]

  reports       Report[]
  relationships Relationship[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdById])
  @@map("posts")
}

model Attribute {
  id String @id @default(cuid())

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  post   Post?   @relation(fields: [postId], references: [id])
  postId String? @unique

  location String?

  // Only Tenant
  maxPrice Int?
  minPrice Int?

  maxSize Int?
  minSize Int?

  // Only Owner and Agency
  price Int?
  size Int?

  rentStartDate DateTime?
  rentEndDate   DateTime?

  furnished  Boolean?
  house      Boolean?
  appartment Boolean?
  terrace    Boolean?
  pets       Boolean?
  smoker     Boolean?
  disability Boolean?
  garden     Boolean?
  parking    Boolean?
  elevator   Boolean?
  pool       Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
  @@map("attributes")
}

model Report {
  id String @id @default(cuid())

  createdBy   User   @relation(fields: [createdById], references: [id], "reports_created", onDelete: Cascade)
  createdById String

  user   User?   @relation(fields: [userId], references: [id], "reported", onDelete: Cascade)
  userId String?

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?

  reason ReportReason?
  desc   String?
  status ReportStatus? @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
  @@index([createdById])
  @@map("reports")
}

model Document {
  id String @id @default(cuid())

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?

  valid  Boolean @default(false)
  ext String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
  @@map("documents")
}

model Image {
  id String @id @default(cuid())

  ext String

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
  @@map("pictures")
}

model Relationship {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  isMatch      Boolean? @default(false)
  conversation Conversation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
  @@map("relationships")
}

model Conversation {
  id String @id @default(cuid())

  rs         Relationship? @relation(fields: [relationId], references: [id], onDelete: Cascade)
  relationId String?       @unique

  type     ConversationType? @default(NONE)
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([relationId])
  @@map("conversations")
}

model Message {
  id String @id @default(cuid())

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String

  content String
  read    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([conversationId])
  @@index([senderId])
  @@map("messages")
}