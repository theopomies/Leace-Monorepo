import { TRPCError } from "@trpc/server";
import { Context } from "../context";
import { ReportReason } from "@leace/db";

export interface StringProps {
  ctx: Context;
  userId?: string;
  postId?: string;
  check: (string | undefined)[];
}

const bannedWords: string[] = [
  "dépôt à l'avance",
  "caution",
  "location à court terme",
  "loyer bas",
];

export const filterStrings = ({ ctx, userId, postId, check }: StringProps) => {
  let isScam = false;

  for (const str of check) {
    if (!str) return;
    for (const expression of bannedWords) {
      if (str.toLowerCase().includes(expression.toLowerCase())) {
        isScam = true;
        break;
      }
    }
  }

  if (isScam) {
    if (userId) {
      const created = ctx.prisma.report.create({
        data: {
          createdById: "",
          userId: userId,
          reason: ReportReason.SCAM,
          desc: `Report generated by system - Scammy fields `,
        },
      });
      if (!created) throw new TRPCError({ code: "INTERNAL_SERVER_ERROR" });
    }
    if (postId) {
      const created = ctx.prisma.report.create({
        data: {
          createdById: "",
          postId: postId,
          reason: ReportReason.SCAM,
          desc: `Report generated by system - Scammy fields `,
        },
      });
      if (!created) throw new TRPCError({ code: "INTERNAL_SERVER_ERROR" });
    }
  }
};

const BannedMailExp: RegExp[] = [
  /(^|[\W\s])(?=.{0,20}(paypal|apple|google|yahoo|amazon|outlook))(?=.*?@)/gi,
  /(^|[\W\s])(?=.{0,20}(secure|confirm|verify|login|support|help))(?=.*?@)/gi,
  /(^|[\W\s])(?=.{0,20}(admin|service|billing|account|payment))(?=.*?@)/gi,
  /(^|[\W\s])(?=.{0,20}(scam|fraud|phishing))(?=.*?@)/gi,
  /(^|[\W\s])(?=.{0,20}(hack|attack|breach|compromise))(?=.*?@)/gi,
  /(^|[\W\s])(?=.{0,20}(urgent|important|notice|action))(?=.*?@)/gi,
];

export const filterMail = ({ ctx, userId, postId, check }: StringProps) => {
  let isScam = false;

  for (const email of check) {
    if (!email) return;
    for (const pattern of BannedMailExp) {
      if (pattern.test(email.toLowerCase())) {
        isScam = true;
        break;
      }
    }
  }

  if (isScam) {
    if (userId) {
      const created = ctx.prisma.report.create({
        data: {
          createdById: "",
          userId: userId,
          reason: ReportReason.SCAM,
          desc: `Report generated by system - Scammy fields `,
        },
      });
      if (!created) throw new TRPCError({ code: "INTERNAL_SERVER_ERROR" });
    }
    if (postId) {
      const created = ctx.prisma.report.create({
        data: {
          createdById: "",
          postId: postId,
          reason: ReportReason.SCAM,
          desc: `Report generated by system - Scammy fields `,
        },
      });
      if (!created) throw new TRPCError({ code: "INTERNAL_SERVER_ERROR" });
    }
  }
};

const fraudulentCountries = [
  "Nigeria",
  "Ghana",
  "Côte d'Ivoire",
  "Cameroon",
  "Senegal",
  "Benin",
  "Togo",
  "Sierra Leone",
  "Liberia",
  "South Africa",
  "Kenya",
  "Tanzania",
  "Uganda",
  "Rwanda",
  "Zimbabwe",
  "Zambia",
  "Mauritius",
  "Morocco",
  "Egypt",
  "Philippines",
];

export const checkLocation = ({ ctx, userId, postId, check }: StringProps) => {
  let isScam = false;

  for (const location of check) {
    if (!location) return;
    for (const country of fraudulentCountries) {
      if (location.toLowerCase().includes(country.toLowerCase())) {
        isScam = true;
        break;
      }
    }
  }

  if (isScam) {
    if (userId) {
      const created = ctx.prisma.report.create({
        data: {
          createdById: "",
          userId: userId,
          reason: ReportReason.SCAM,
          desc: `Report generated by system - Scammy fields `,
        },
      });
      if (!created) throw new TRPCError({ code: "INTERNAL_SERVER_ERROR" });
    }
    if (postId) {
      const created = ctx.prisma.report.create({
        data: {
          createdById: "",
          postId: postId,
          reason: ReportReason.SCAM,
          desc: `Report generated by system - Scammy fields `,
        },
      });
      if (!created) throw new TRPCError({ code: "INTERNAL_SERVER_ERROR" });
    }
  }
};
